<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LPC2148 Simulation</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .container {
            display: flex;
            flex-direction: row;
            width: 100%;
            height: 100vh;
        }

        .code-editor, .simulation {
            flex: 1;
            height: 100%;
            overflow: hidden;
        }

        .code-editor {
            background: #2c3e50;
            color: white;
            display: flex;
            flex-direction: column;
        }

        .simulation {
            background: #ecf0f1;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        #editor {
            flex: 1;
        }

        select, button {
            width: 100%;
            padding: 12px;
            border: none;
            cursor: pointer;
            color: white;
            background-color: #3498db;
            font-size: 16px;
        }

        button:hover {
            background-color: #2980b9;
        }

        .led {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            margin: 15px;
            background-color: #555;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            transition: background-color 0.3s ease;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 10;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.4);
        }

        .modal-content {
            background: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 600px;
        }

        .close {
            float: right;
            font-size: 24px;
            font-weight: bold;
            color: #888;
            cursor: pointer;
        }

        textarea {
            width: 100%;
            height: 200px;
            margin-top: 10px;
            padding: 10px;
        }

        /* ðŸ”¹ Responsive Fix */
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                height: auto;
            }

            .code-editor, .simulation {
                flex: none;
                height: 50vh;
                width: 100%;
            }

            #editor {
                height: 100%;
            }

            .led {
                width: 50px;
                height: 50px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="code-editor">
            <select id="codeSelector">
                <option value="default">Blinking LEDs</option>
                <option value="example1">Example 1</option>
                <option value="example2">Example 2</option>
            </select>
            <button id="addCodeButton">Add Code</button>
            <div id="editor"></div>
            <button id="runButton">Run</button>
        </div>
        <div class="simulation">
            <div id="led-red" class="led"></div>
            <div id="led-yellow" class="led"></div>
            <div id="led-green" class="led"></div>
        </div>
    </div>

    <!-- Modal -->
    <div id="addCodeModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Add LPC2148 Code</h2>
            <textarea id="newCode" placeholder="Paste your LPC2148 code here"></textarea>
            <button id="saveCodeButton">Save Code</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js"></script>
    <script>
        const editor = ace.edit("editor");
        editor.setTheme("ace/theme/monokai");
        editor.session.setMode("ace/mode/c_cpp");

        const defaultCode = `
#define RED 0
#define YELLOW 19
#define GREEN 22

void setup() {
    pinMode(RED, OUTPUT);
    pinMode(YELLOW, OUTPUT);
    pinMode(GREEN, OUTPUT);
}

void loop() {
    digitalWrite(GREEN, HIGH);
    delay(3000);

    digitalWrite(GREEN, LOW);
    digitalWrite(YELLOW, HIGH);
    delay(500);

    digitalWrite(YELLOW, LOW);
    digitalWrite(RED, HIGH);
    delay(2000);

    digitalWrite(RED, LOW);
    digitalWrite(YELLOW, HIGH);
    delay(500);

    digitalWrite(YELLOW, LOW);
}
`;

        const example1Code = `
#define RED 0
void setup() {
    pinMode(RED, OUTPUT);
}
void loop() {
    digitalWrite(RED, HIGH);
    delay(1000);
    digitalWrite(RED, LOW);
    delay(1000);
}`;

        const example2Code = `
#define YELLOW 19
#define GREEN 22
void setup() {
    pinMode(YELLOW, OUTPUT);
    pinMode(GREEN, OUTPUT);
}
void loop() {
    digitalWrite(YELLOW, HIGH);
    digitalWrite(GREEN, LOW);
    delay(1000);
    digitalWrite(YELLOW, LOW);
    digitalWrite(GREEN, HIGH);
    delay(1000);
}`;

        editor.setValue(defaultCode);
        editor.clearSelection();

        const ledRed = document.getElementById('led-red');
        const ledYellow = document.getElementById('led-yellow');
        const ledGreen = document.getElementById('led-green');

        function setLED(led, state) {
            led.style.backgroundColor = (state === 'HIGH') ? 
                (led.id === 'led-red' ? 'red' : led.id === 'led-yellow' ? 'yellow' : 'green') : '#555';
        }

        function parseCode(code) {
            const lines = code.split('\n');
            const commands = [];
            const pinMap = { RED: ledRed, YELLOW: ledYellow, GREEN: ledGreen };
            for (let line of lines) {
                line = line.trim();
                if (line.startsWith('digitalWrite')) {
                    const m = line.match(/digitalWrite\((\w+),\s*(\w+)\)/);
                    if (m && pinMap[m[1]]) commands.push({ action: 'digitalWrite', pin: pinMap[m[1]], state: m[2] });
                } else if (line.startsWith('delay')) {
                    const m = line.match(/delay\((\d+)\)/);
                    if (m) commands.push({ action: 'delay', duration: parseInt(m[1]) });
                }
            }
            return commands;
        }

        async function execute(commands) {
            for (const cmd of commands) {
                if (cmd.action === 'digitalWrite') setLED(cmd.pin, cmd.state);
                if (cmd.action === 'delay') await new Promise(r => setTimeout(r, cmd.duration));
            }
        }

        document.getElementById('runButton').addEventListener('click', () => {
            [ledRed, ledYellow, ledGreen].forEach(l => setLED(l, 'LOW'));
            execute(parseCode(editor.getValue()));
        });

        document.getElementById('codeSelector').addEventListener('change', e => {
            const val = e.target.value;
            editor.setValue(val === 'example1' ? example1Code : val === 'example2' ? example2Code : defaultCode);
            editor.clearSelection();
        });

        // Modal
        const modal = document.getElementById('addCodeModal');
        const addCodeButton = document.getElementById('addCodeButton');
        const closeModal = document.querySelector('.close');
        const saveCodeButton = document.getElementById('saveCodeButton');

        addCodeButton.onclick = () => modal.style.display = 'block';
        closeModal.onclick = () => modal.style.display = 'none';
        window.onclick = (e) => { if (e.target === modal) modal.style.display = 'none'; };

        saveCodeButton.onclick = () => {
            const newCode = document.getElementById('newCode').value;
            if (newCode.trim()) {
                const opt = document.createElement('option');
                opt.text = `User Code ${Date.now()}`;
                opt.dataset.code = newCode;
                document.getElementById('codeSelector').add(opt);
                modal.style.display = 'none';
            }
        };
    </script>
</body>
</html>
